CREATE OR REPLACE FUNCTION nhapKho() RETURNS trigger AS $$
DECLARE expiredDate date;
DECLARE shelfTime int;
BEGIN
	shelfTime:=(SELECT MH.HAN_SU_DUNG 
		FROM MAT_HANG AS MH 
		WHERE MH.MA_MAT_HANG=NEW.MA_MAT_HANG);
	expiredDate:=NEW.NGAY_SAN_XUAT+interval '1 month' * shelfTime;
	IF EXISTS(SELECT * FROM MAT_HANG_TRONG_KHO AS MHTK
			 WHERE MHTK.MA_MAT_HANG=NEW.MA_MAT_HANG 
			  and MHTK.NGAY_SAN_XUAT=NEW.NGAY_SAN_XUAT) THEN
			  UPDATE MAT_HANG_TRONG_KHO 
			  SET SO_LUONG=SO_LUONG+NEW.SO_LUONG
			  	WHERE MA_MAT_HANG=NEW.MA_MAT_HANG 
			  	and NGAY_SAN_XUAT=NEW.NGAY_SAN_XUAT;
	ELSE	
			INSERT INTO MAT_HANG_TRONG_KHO(MA_MAT_HANG,SO_LUONG,NGAY_SAN_XUAT,
										  NGAY_HET_HAN) 
			VALUES (NEW.MA_MAT_HANG,NEW.SO_LUONG,NEW.NGAY_SAN_XUAT,expiredDate);
	END IF;
	-------------------------------------------
	IF EXISTS(SELECT * FROM SL_HANG_TRONG_KHO AS SLHTK
			 WHERE SLHTK.MA_MAT_HANG=NEW.MA_MAT_HANG) THEN
			  UPDATE SL_HANG_TRONG_KHO 
			  SET SO_LUONG=(SELECT SUM(KHO.SO_LUONG) 
							FROM MAT_HANG_TRONG_KHO AS KHO
						   WHERE KHO.MA_MAT_HANG=NEW.MA_MAT_HANG)
							, GIA=NEW.DON_GIA
			  WHERE MA_MAT_HANG=NEW.MA_MAT_HANG ;
	ELSE
		INSERT INTO SL_HANG_TRONG_KHO(MA_MAT_HANG,SO_LUONG,GIA) 
		VALUES (NEW.MA_MAT_HANG,NEW.SO_LUONG,NEW.DON_GIA);
	END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS nhapKho on CHI_TIET_NHAP_KHO;
CREATE TRIGGER nhapKho
AFTER INSERT ON CHI_TIET_NHAP_KHO
FOR EACH ROW EXECUTE PROCEDURE	nhapKho();
----------------------------------------------------

CREATE OR REPLACE FUNCTION xuatKho() RETURNS trigger AS $$
DECLARE expiredDate date;
BEGIN
	raise info 'heehe %', 'hehe' ;
	expiredDate:=(SELECT MHTK.NGAY_HET_HAN 
		FROM MAT_HANG_TRONG_KHO AS MHTK 
		WHERE MHTK.MA_MAT_HANG=NEW.MA_MAT_HANG AND MHTK.NGAY_SAN_XUAT=NEW.NGAY_SAN_XUAT) ;
	IF EXISTS(SELECT * FROM MAT_HANG_CANTEEN
			 WHERE MA_MAT_HANG=NEW.MA_MAT_HANG 
			  and NGAY_SAN_XUAT=NEW.NGAY_SAN_XUAT) THEN
			  UPDATE MAT_HANG_CANTEEN 
			  SET SO_LUONG=SO_LUONG+NEW.SO_LUONG
			  WHERE MA_MAT_HANG=NEW.MA_MAT_HANG and NGAY_SAN_XUAT=NEW.NGAY_SAN_XUAT;
	ELSE	
			INSERT INTO MAT_HANG_CANTEEN(MA_MAT_HANG,SO_LUONG,NGAY_SAN_XUAT,
										  NGAY_HET_HAN) 
			VALUES (NEW.MA_MAT_HANG,NEW.SO_LUONG,NEW.NGAY_SAN_XUAT,expiredDate);
	END IF;
	-----------------------------------------
	IF EXISTS(SELECT * FROM SL_HANG_CANTEEN AS SLHCT
			 WHERE SLHCT.MA_MAT_HANG=NEW.MA_MAT_HANG) THEN
			  UPDATE SL_HANG_CANTEEN 
			  SET SO_LUONG=(SELECT SUM(CANTEEN.SO_LUONG) 
							FROM MAT_HANG_CANTEEN AS CANTEEN
						   WHERE CANTEEN.MA_MAT_HANG=NEW.MA_MAT_HANG)
							, 
			  GIA=NEW.DON_GIA
			  WHERE MA_MAT_HANG=NEW.MA_MAT_HANG ;
	ELSE
		INSERT INTO SL_HANG_CANTEEN(MA_MAT_HANG,SO_LUONG,GIA) 
		VALUES (NEW.MA_MAT_HANG,NEW.SO_LUONG,NEW.DON_GIA);
	END IF;
	-------------------------------------------------
	IF (SELECT MHTK.SO_LUONG FROM MAT_HANG_TRONG_KHO AS MHTK
		 WHERE MHTK.MA_MAT_HANG=NEW.MA_MAT_HANG and MHTK.NGAY_SAN_XUAT=NEW.NGAY_SAN_XUAT) > NEW.SO_LUONG THEN
		 UPDATE MAT_HANG_TRONG_KHO
		 SET SO_LUONG=SO_LUONG-NEW.SO_LUONG
		 WHERE MA_MAT_HANG=NEW.MA_MAT_HANG and NGAY_SAN_XUAT=NEW.NGAY_SAN_XUAT;
	ELSE
		DELETE FROM MAT_HANG_TRONG_KHO
		WHERE MA_MAT_HANG=NEW.MA_MAT_HANG and NGAY_SAN_XUAT=NEW.NGAY_SAN_XUAT;
	END IF;
	--------------------------------------------------
	IF (SELECT SLHTK.SO_LUONG FROM SL_HANG_TRONG_KHO AS SLHTK
		 WHERE SLHTK.MA_MAT_HANG=NEW.MA_MAT_HANG) > NEW.SO_LUONG THEN
		 UPDATE SL_HANG_TRONG_KHO
		 SET SO_LUONG=(SELECT SUM(KHO.SO_LUONG) 
							FROM MAT_HANG_TRONG_KHO AS KHO
						   WHERE KHO.MA_MAT_HANG=NEW.MA_MAT_HANG), GIA=NEW.GIA_BAN
		 WHERE MA_MAT_HANG=NEW.MA_MAT_HANG;
	ELSE
		DELETE FROM SL_HANG_TRONG_KHO
		WHERE MA_MAT_HANG=NEW.MA_MAT_HANG;
	END IF;
	---------------------------------------------------------
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS xuatKho on CHI_TIET_XUAT_KHO;
CREATE TRIGGER xuatKho
AFTER INSERT ON CHI_TIET_XUAT_KHO
FOR EACH ROW EXECUTE PROCEDURE xuatKho();
------------------------------------------------------
CREATE OR REPLACE FUNCTION capNhatTrangThaiDonHang() RETURNS trigger AS $$
BEGIN
	IF NEW.TRANG_THAI = 'DA NHAN HOA DON' THEN
		UPDATE CHI_TIET_DON_HANG
		SET TRANG_THAI = 'DA NHAN HOA DON'
		WHERE MA_DON_HANG=NEW.MA_DON_HANG;
-- 		FOR SLTL, date IN (SELECT KHO.SO_LUONG,KHO.NGAY_SAN_XUAT FROM MAT_HANG_TRONG_KHO AS KHO 
-- 			WHERE KHO.MA_MAT_HANG=NEW.MA_MAT_HANG ORDER BY KHO.NGAY_SAN_XUAT)
-- 		LOOP
-- 			IF SLMUA==0 THEN RETURN NEW END IF
-- 			tempValue:=SLMUA-SLTL
-- 			IF tempValue<0 THEN
-- 		END LOOP
	END IF;
	
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS capNhatTrangThaiDonHang on DON_HANG;
CREATE TRIGGER capNhatTrangThaiDonHang
AFTER UPDATE OF TRANG_THAI ON DON_HANG
FOR EACH ROW EXECUTE PROCEDURE capNhatTrangThaiDonHang();

------------------------------------------------------------

-- ------------------------------------------------------
CREATE OR REPLACE FUNCTION nhanHang() RETURNS trigger AS $$
DECLARE SLMUA int = NEW.SO_LUONG; SLTL int; MFDate date; tempValue int; MAMH text=NEW.MA_MAT_HANG;
BEGIN
	
-- 	SLMUA:=1;
	IF NEW.TRANG_THAI = 'DA NHAN HOA DON' THEN
	IF EXISTS (SELECT * FROM SL_HANG_CANTEEN WHERE MA_MAT_HANG=NEW.MA_MAT_HANG) THEN
		IF (SELECT SO_LUONG FROM SL_HANG_CANTEEN WHERE MA_MAT_HANG=NEW.MA_MAT_HANG)>SLMUA THEN
			UPDATE SL_HANG_CANTEEN  SET SO_LUONG=SO_LUONG-SLMUA WHERE MA_MAT_HANG=NEW.MA_MAT_HANG;
		ELSE
			DELETE FROM SL_HANG_CANTEEN  WHERE MA_MAT_HANG=NEW.MA_MAT_HANG;
		END IF;
	END IF;
		
	WHILE SLMUA>0 LOOP
		IF SLMUA=0 THEN RETURN NEW; END IF;
		FOR SLTL, MFDate IN (SELECT KHO.SO_LUONG,KHO.NGAY_SAN_XUAT FROM MAT_HANG_CANTEEN AS KHO 
			WHERE KHO.MA_MAT_HANG=NEW.MA_MAT_HANG ORDER BY KHO.NGAY_SAN_XUAT)
		LOOP
				IF SLMUA=0 THEN RETURN NEW; END IF;
					tempValue:=SLMUA-SLTL;
					IF tempValue<0 THEN
						UPDATE MAT_HANG_CANTEEN
						SET SO_LUONG=-tempValue
						WHERE MA_MAT_HANG=MAMH and MFDate=NGAY_SAN_XUAT;
						SLMUA:=0;
					END IF;

					IF tempValue=0 THEN
						DELETE FROM MAT_HANG_CANTEEN
						WHERE MA_MAT_HANG=MAMH and MFDate=NGAY_SAN_XUAT;
						SLMUA:=0;
					END IF;

					IF tempValue>0 THEN
						DELETE FROM MAT_HANG_CANTEEN
						WHERE MA_MAT_HANG=MAMH and MFDate=NGAY_SAN_XUAT;
						SLMUA:=tempValue;
					END IF;
					IF SLMUA=0 THEN RETURN NEW; END IF;
		END LOOP;
		IF SLMUA=0 THEN RETURN NEW; END IF;
	END LOOP;
	END IF;
	
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS nhanHang on CHI_TIET_DON_HANG;
CREATE TRIGGER nhanHang
AFTER UPDATE OF TRANG_THAI ON CHI_TIET_DON_HANG
FOR EACH ROW EXECUTE PROCEDURE nhanHang();

------------------------------------------------------------
create or replace procedure themDonHang(
	maMH text[], soLuong int[]
)
language plpgsql    
as $$
DECLARE idDonHang text; thanhTien int; index int:=1; giaBan int;
begin
    INSERT INTO DON_HANG VALUES(DEFAULT,DEFAULT,DEFAULT,DEFAULT);
	idDonHang:=(SELECT MA_DON_HANG FROM DON_HANG ORDER BY NGAY_MUA DESC LIMIT 1);
	WHILE index <= array_length(maMH, 1) LOOP
	giaBan:=(SELECT GIA FROM SL_HANG_CANTEEN WHERE MA_MAT_HANG=maMH[index]);
	thanhTien:=soLuong[index]*giaBan;
	INSERT INTO CHI_TIET_DON_HANG(MA_DON_HANG,MA_MAT_HANG,SO_LUONG,GIA_BAN,THANH_TIEN ) VALUES (idDonHang,maMH[index],soLuong[index],giaBan,thanhTien);
	index:=index+1;
	END LOOP;
	

end;$$;

-- call addNewBill('HJHJHJHJ',2,15000);
-----------------------------------------------------
create or replace procedure themPhieuNhapHang(
	maMH text[], soLuong int[], donGia int[], ngaySX date[]
)
language plpgsql    
as $$
DECLARE idNhapHang text; index int:=1;
begin
    INSERT INTO PHIEU_NHAP_KHO VALUES(DEFAULT,DEFAULT);
	idNhapHang:=(SELECT MA_PHIEU FROM PHIEU_NHAP_KHO ORDER BY NGAY_NHAP DESC LIMIT 1);
	WHILE index <= array_length(maMH, 1) LOOP
	INSERT INTO CHI_TIET_NHAP_KHO(MA_PHIEU,MA_MAT_HANG,NGAY_SAN_XUAT,DON_GIA,SO_LUONG) VALUES (idNhapHang,maMH[index],ngaySX[index],donGia[index],soLuong[index]);
	index:=index+1;
	END LOOP;
end;$$;

---------------------------------------------------------------
create or replace procedure themPhieuXuatHang(
	maMH text[], soLuong int[], donGia int[], ngaySX date[]
)
language plpgsql    
as $$
DECLARE idXuatHang text;index int:=1;
begin
    INSERT INTO PHIEU_XUAT_KHO VALUES(DEFAULT,DEFAULT);
	idXuatHang:=(SELECT MA_PHIEU FROM PHIEU_XUAT_KHO ORDER BY NGAY_XUAT DESC LIMIT 1);
	WHILE index <= array_length(maMH, 1) LOOP
	INSERT INTO CHI_TIET_XUAT_KHO(MA_PHIEU,MA_MAT_HANG,NGAY_SAN_XUAT,DON_GIA,SO_LUONG) VALUES (idXuatHang,maMH[index],ngaySX[index],donGia[index],soLuong[index]);
	index:=index+1;
	END LOOP;
end;$$;